;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: HTLCNotification
;; TLB: _ htlcID:int257 sender:address receiver:address amount:int257 timelock:int257 hashlock:int257 dstAddress:^string phtlcID:int257 = HTLCNotification
;;

(slice, ((int, slice, slice, int, int, int, slice, int))) $HTLCNotification$_load(slice sc_0) inline_ref {
    var v'htlcID = sc_0~load_int(257);
    var v'sender = sc_0~__tact_load_address();
    var v'receiver = sc_0~__tact_load_address();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'amount = sc_1~load_int(257);
    var v'timelock = sc_1~load_int(257);
    var v'hashlock = sc_1~load_int(257);
    var v'dstAddress = sc_1~load_ref().begin_parse();
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'phtlcID = sc_2~load_int(257);
    return (sc_0, (v'htlcID, v'sender, v'receiver, v'amount, v'timelock, v'hashlock, v'dstAddress, v'phtlcID));
}

;;
;; Type: HTLCNotify
;; Header: 0xc2638484
;; TLB: htlc_notify#c2638484 data:HTLCNotification{htlcID:int257,sender:address,receiver:address,amount:int257,timelock:int257,hashlock:int257,dstAddress:^string,phtlcID:int257} = HTLCNotify
;;

(slice, (((int, slice, slice, int, int, int, slice, int)))) $HTLCNotify$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3261301892);
    var v'data = sc_0~$HTLCNotification$_load();
    return (sc_0, (v'data));
}

;;
;; Type: Messenger
;;

tuple $Messenger$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return null();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $Messenger$_contract_init();
    }
}

() $Messenger$_contract_store(tuple v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    set_data(b.end_cell());
}