;;
;; Header files for HashedTimeLockTON
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_load_address_opt
(slice, slice) __tact_load_address_opt(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_prepare_random
() __tact_prepare_random() impure inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_int
(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) inline;

;; __tact_dict_min_int_int
(int, int, int) __tact_dict_min_int_int(cell d, int kl, int vl) inline;

;; __tact_dict_next_int_int
(int, int, int) __tact_dict_next_int_int(cell d, int kl, int pivot, int vl) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_dict_min_int_cell
(int, cell, int) __tact_dict_min_int_cell(cell d, int kl) inline;

;; __tact_dict_next_int_cell
(int, cell, int) __tact_dict_next_int_cell(cell d, int kl, int pivot) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $TokenTransfer$_store
builder $TokenTransfer$_store(builder build_0, (int, int, slice, slice, cell, int, slice) v) inline_ref;

;; $TokenTransfer$_store_cell
cell $TokenTransfer$_store_cell((int, int, slice, slice, cell, int, slice) v) inline;

;; $TokenNotification$_load
(slice, ((int, int, slice, slice))) $TokenNotification$_load(slice sc_0) inline;

;; $Notification$_store
builder $Notification$_store(builder build_0, (int, int, slice, slice, slice, slice, slice, slice, int, int) v) inline_ref;

;; $Notify$_store
builder $Notify$_store(builder build_0, ((int, int, slice, slice, slice, slice, slice, slice, int, int)) v) inline;

;; $Notify$_store_cell
cell $Notify$_store_cell(((int, int, slice, slice, slice, slice, slice, slice, int, int)) v) inline;

;; $PHTLC$_store
builder $PHTLC$_store(builder build_0, (slice, slice, slice, slice, slice, slice, int, int, slice, int, int, slice, slice) v) inline_ref;

;; $PHTLC$_store_cell
cell $PHTLC$_store_cell((slice, slice, slice, slice, slice, slice, int, int, slice, int, int, slice, slice) v) inline;

;; $PHTLC$_load
(slice, ((slice, slice, slice, slice, slice, slice, int, int, slice, int, int, slice, slice))) $PHTLC$_load(slice sc_0) inline_ref;

;; $PHTLC$_as_optional
tuple $PHTLC$_as_optional((slice, slice, slice, slice, slice, slice, int, int, slice, int, int, slice, slice) v) inline;

;; $PHTLC$_load_opt
tuple $PHTLC$_load_opt(cell cl) inline;

;; $CommitData$_load
(slice, ((cell, cell, cell, slice, slice, slice, slice, slice, int, slice, slice, slice))) $CommitData$_load(slice sc_0) inline_ref;

;; $CommitData$_load_not_mut
((cell, cell, cell, slice, slice, slice, slice, slice, int, slice, slice, slice)) $CommitData$_load_not_mut(slice sc_0) inline_ref;

;; $HTLC$_store
builder $HTLC$_store(builder build_0, (slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, slice, slice) v) inline_ref;

;; $HTLC$_store_cell
cell $HTLC$_store_cell((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, slice, slice) v) inline;

;; $HTLC$_load
(slice, ((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, slice, slice))) $HTLC$_load(slice sc_0) inline_ref;

;; $HTLC$_as_optional
tuple $HTLC$_as_optional((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, slice, slice) v) inline;

;; $HTLC$_load_opt
tuple $HTLC$_load_opt(cell cl) inline;

;; $LockData$_load
(slice, ((int, int, slice, slice, slice, slice, slice, int, slice, slice, slice))) $LockData$_load(slice sc_0) inline_ref;

;; $LockData$_load_not_mut
((int, int, slice, slice, slice, slice, slice, int, slice, slice, slice)) $LockData$_load_not_mut(slice sc_0) inline_ref;

;; $LockCommitmentData$_load
(slice, ((int, int, int))) $LockCommitmentData$_load(slice sc_0) inline;

;; $LockCommitment$_load
(slice, (((int, int, int)))) $LockCommitment$_load(slice sc_0) inline;

;; $UncommitData$_load
(slice, ((int))) $UncommitData$_load(slice sc_0) inline;

;; $Uncommit$_load
(slice, (((int)))) $Uncommit$_load(slice sc_0) inline;

;; $RedeemData$_load
(slice, ((int, int))) $RedeemData$_load(slice sc_0) inline;

;; $Redeem$_load
(slice, (((int, int)))) $Redeem$_load(slice sc_0) inline;

;; $UnlockData$_load
(slice, ((int))) $UnlockData$_load(slice sc_0) inline;

;; $Unlock$_load
(slice, (((int)))) $Unlock$_load(slice sc_0) inline;

;; $CommitId$_store
builder $CommitId$_store(builder build_0, (int) v) inline;

;; $CommitId$_store_cell
cell $CommitId$_store_cell((int) v) inline;

;; $HashedTimeLockTON$_store
builder $HashedTimeLockTON$_store(builder build_0, (cell, cell, cell, int, int) v) inline;

;; $HashedTimeLockTON$_load
(slice, ((cell, cell, cell, int, int))) $HashedTimeLockTON$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $PHTLC$_not_null
((slice, slice, slice, slice, slice, slice, int, int, slice, int, int, slice, slice)) $PHTLC$_not_null(tuple v) inline;

;; $PHTLC$_to_tuple
tuple $PHTLC$_to_tuple(((slice, slice, slice, slice, slice, slice, int, int, slice, int, int, slice, slice)) v) inline;

;; $PHTLC$_to_opt_tuple
tuple $PHTLC$_to_opt_tuple(tuple v) inline;

;; $PHTLC$_to_opt_external
tuple $PHTLC$_to_opt_external(tuple v) inline;

;; $HTLC$_not_null
((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, slice, slice)) $HTLC$_not_null(tuple v) inline;

;; $HTLC$_to_tuple
tuple $HTLC$_to_tuple(((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, slice, slice)) v) inline;

;; $HTLC$_to_opt_tuple
tuple $HTLC$_to_opt_tuple(tuple v) inline;

;; $HTLC$_to_opt_external
tuple $HTLC$_to_opt_external(tuple v) inline;

;; $global_random
int $global_random(int $min, int $max) impure inline;

;; $HashedTimeLockTON$_contract_init
(cell, cell, cell, int, int) $HashedTimeLockTON$_contract_init() impure inline_ref;

;; $HashedTimeLockTON$_contract_load
(cell, cell, cell, int, int) $HashedTimeLockTON$_contract_load() impure inline_ref;

;; $HashedTimeLockTON$_contract_store
() $HashedTimeLockTON$_contract_store((cell, cell, cell, int, int) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $Builder$_fun_asSlice
slice $Builder$_fun_asSlice(builder $self) impure inline;

;; $Slice$_fun_asCell
cell $Slice$_fun_asCell(slice $self) impure inline;

;; $HashedTimeLockTON$_fun_lockExists
((cell, cell, cell, int, int), int) $HashedTimeLockTON$_fun_lockExists((cell, cell, cell, int, int) $self, int $hashlock) impure inline_ref;

;; $HashedTimeLockTON$_fun_commitExists
((cell, cell, cell, int, int), int) $HashedTimeLockTON$_fun_commitExists((cell, cell, cell, int, int) $self, int $commitId) impure inline_ref;

;; $PHTLC$_constructor_dstAddress_dstChain_dstAsset_srcAsset_sender_srcReceiver_timelock_amount_messenger_locked_uncommitted_jettonMasterAddress_htlcJettonWalletAddress
((slice, slice, slice, slice, slice, slice, int, int, slice, int, int, slice, slice)) $PHTLC$_constructor_dstAddress_dstChain_dstAsset_srcAsset_sender_srcReceiver_timelock_amount_messenger_locked_uncommitted_jettonMasterAddress_htlcJettonWalletAddress(slice $dstAddress, slice $dstChain, slice $dstAsset, slice $srcAsset, slice $sender, slice $srcReceiver, int $timelock, int $amount, slice $messenger, int $locked, int $uncommitted, slice $jettonMasterAddress, slice $htlcJettonWalletAddress) inline;

;; $CommitId$_constructor_commitId
((int)) $CommitId$_constructor_commitId(int $commitId) inline;

;; $HashedTimeLockTON$_fun__commit
((cell, cell, cell, int, int), ()) $HashedTimeLockTON$_fun__commit((cell, cell, cell, int, int) $self, slice $msgSlc, slice $sender, int $value) impure inline_ref;

;; $HTLC$_constructor_dstAddress_dstChain_dstAsset_srcAsset_sender_srcReceiver_hashlock_secret_amount_timelock_redeemed_unlocked_jettonMasterAddress_htlcJettonWalletAddress
((slice, slice, slice, slice, slice, slice, int, int, int, int, int, int, slice, slice)) $HTLC$_constructor_dstAddress_dstChain_dstAsset_srcAsset_sender_srcReceiver_hashlock_secret_amount_timelock_redeemed_unlocked_jettonMasterAddress_htlcJettonWalletAddress(slice $dstAddress, slice $dstChain, slice $dstAsset, slice $srcAsset, slice $sender, slice $srcReceiver, int $hashlock, int $secret, int $amount, int $timelock, int $redeemed, int $unlocked, slice $jettonMasterAddress, slice $htlcJettonWalletAddress) inline;

;; $SendParameters$_constructor_to_bounce_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode_body(slice $to, int $bounce, int $value, int $mode, cell $body) inline;

;; $Notify$_constructor_data
(((int, int, slice, slice, slice, slice, slice, slice, int, int))) $Notify$_constructor_data((int, int, slice, slice, slice, slice, slice, slice, int, int) $data) inline;

;; $Notification$_constructor_commitId_hashlock_dstChain_dstAsset_dstAddress_srcAsset_sender_srcReceiver_amount_timelock
((int, int, slice, slice, slice, slice, slice, slice, int, int)) $Notification$_constructor_commitId_hashlock_dstChain_dstAsset_dstAddress_srcAsset_sender_srcReceiver_amount_timelock(int $commitId, int $hashlock, slice $dstChain, slice $dstAsset, slice $dstAddress, slice $srcAsset, slice $sender, slice $srcReceiver, int $amount, int $timelock) inline;

;; $HashedTimeLockTON$_fun__lock
((cell, cell, cell, int, int), ()) $HashedTimeLockTON$_fun__lock((cell, cell, cell, int, int) $self, slice $msgSlc, slice $sender, int $value) impure inline_ref;

;; $HashedTimeLockTON$_fun_getLockCDetails
((cell, cell, cell, int, int), tuple) $HashedTimeLockTON$_fun_getLockCDetails((cell, cell, cell, int, int) $self, int $hashlock) impure inline_ref;

;; $HashedTimeLockTON$_fun_getCommitDetails
((cell, cell, cell, int, int), tuple) $HashedTimeLockTON$_fun_getCommitDetails((cell, cell, cell, int, int) $self, int $commitId) impure inline_ref;

;; $HashedTimeLockTON$_fun_commitsLength
((cell, cell, cell, int, int), int) $HashedTimeLockTON$_fun_commitsLength((cell, cell, cell, int, int) $self) impure inline_ref;

;; $HashedTimeLockTON$_fun_locksLength
((cell, cell, cell, int, int), int) $HashedTimeLockTON$_fun_locksLength((cell, cell, cell, int, int) $self) impure inline_ref;

;; $HashedTimeLockTON$_fun_lockIdToCommitIdLength
((cell, cell, cell, int, int), int) $HashedTimeLockTON$_fun_lockIdToCommitIdLength((cell, cell, cell, int, int) $self) impure inline_ref;

;; $HashedTimeLockTON$_fun_getCommits
((cell, cell, cell, int, int), cell) $HashedTimeLockTON$_fun_getCommits((cell, cell, cell, int, int) $self, slice $senderAddr) impure inline_ref;

;; $HashedTimeLockTON$_fun_getLocks
((cell, cell, cell, int, int), cell) $HashedTimeLockTON$_fun_getLocks((cell, cell, cell, int, int) $self, slice $senderAddr) impure inline_ref;

;; $HashedTimeLockTON$_fun_getLockIdByCommitId
((cell, cell, cell, int, int), int) $HashedTimeLockTON$_fun_getLockIdByCommitId((cell, cell, cell, int, int) $self, int $commitId) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $HashedTimeLockTON$_fun_forward
((cell, cell, cell, int, int), ()) $HashedTimeLockTON$_fun_forward((cell, cell, cell, int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $HashedTimeLockTON$_fun_notify
((cell, cell, cell, int, int), ()) $HashedTimeLockTON$_fun_notify((cell, cell, cell, int, int) $self, cell $body) impure inline;

;; $SendParameters$_constructor_to_value_bounce_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_bounce_mode_body(slice $to, int $value, int $bounce, int $mode, cell $body) inline;

;; $TokenTransfer$_constructor_queryId_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload
((int, int, slice, slice, cell, int, slice)) $TokenTransfer$_constructor_queryId_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload(int $queryId, int $amount, slice $destination, slice $response_destination, cell $custom_payload, int $forward_ton_amount, slice $forward_payload) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
