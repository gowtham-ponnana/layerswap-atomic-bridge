#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_HashedTimeLockTON.headers.fc";
#include "tact_HashedTimeLockTON.stdlib.fc";
#include "tact_HashedTimeLockTON.constants.fc";
#include "tact_HashedTimeLockTON.storage.fc";

;;
;; Contract HashedTimeLockTON functions
;;

(cell, cell, cell, int, int) $HashedTimeLockTON$_contract_init() impure inline_ref {
    var (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)) = (null(), null(), null(), 0, null());
    $self'seed = $global_random(10000000000000000000000000000000000000000000000000000000000000000000000000000, 99999999999999999999999999999999999999999999999999999999999999999999999999999);
    return ($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed);
}

((cell, cell, cell, int, int), int) $HashedTimeLockTON$_fun_lockExists((cell, cell, cell, int, int) $self, int $hashlock) impure inline_ref {
    var (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)) = $self;
    if (null?($HTLC$_load_opt(__tact_dict_get_int_cell($self'locks, 257, $hashlock)))) {
        return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), false);
    }
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), true);
}

((cell, cell, cell, int, int), int) $HashedTimeLockTON$_fun_commitExists((cell, cell, cell, int, int) $self, int $commitId) impure inline_ref {
    var (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)) = $self;
    if (null?($PHTLC$_load_opt(__tact_dict_get_int_cell($self'commits, 257, $commitId)))) {
        return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), false);
    }
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), true);
}

((cell, cell, cell, int, int), ()) $HashedTimeLockTON$_fun__commit((cell, cell, cell, int, int) $self, slice $msgSlc, slice $sender, int $value) impure inline_ref {
    var (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)) = $self;
    var ($msg'dstChain, $msg'dstAsset, $msg'dstAddress, $msg'srcAsset, $msg'srcReceiver, $msg'timelock, $msg'messenger, $msg'jettonMasterAddress, $msg'htlcJettonWalletAddress, $msg'senderPubKey, $msg'hopChains, $msg'hopAssets, $msg'hopAddresses) = $CommitData$_load_not_mut($msgSlc);
    throw_unless(4670, ($value != 0));
    throw_unless(21683, ($msg'timelock > now()));
    $self'contractNonce = $self'contractNonce + 1;
    int $commitId = ($self'seed ^ $self'contractNonce);
    throw_unless(22150, (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)~$HashedTimeLockTON$_fun_commitExists($commitId) == false));
    $self'commits~__tact_dict_set_int_cell(257, $commitId, $PHTLC$_store_cell($PHTLC$_constructor_dstAddress_dstChain_dstAsset_srcAsset_sender_senderPubKey_srcReceiver_timelock_amount_messenger_locked_uncommitted_jettonMasterAddress_htlcJettonWalletAddress($msg'dstAddress, $msg'dstChain, $msg'dstAsset, $msg'srcAsset, $sender, $msg'senderPubKey, $msg'srcReceiver, $msg'timelock, $value, $msg'messenger, false, false, $msg'jettonMasterAddress, $msg'htlcJettonWalletAddress)));
    $global_emit($TokenCommitted$_store_cell($TokenCommitted$_constructor_commitId_dstChain_dstAddress_dstAsset_sender_srcReceiver_srcAsset_amount_timelock_messenger_jettonMasterAddress_htlcJettonWalletAddress_senderPubKey_hopChains_hopAssets_hopAddresses($commitId, $msg'dstChain, $msg'dstAddress, $msg'dstAsset, $sender, $msg'srcReceiver, $msg'srcAsset, $value, $msg'timelock, $msg'messenger, $msg'jettonMasterAddress, $msg'htlcJettonWalletAddress, $msg'senderPubKey, $msg'hopChains, $msg'hopAssets, $msg'hopAddresses)));
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), ());
}

((cell, cell, cell, int, int), ()) $HashedTimeLockTON$_fun__lock((cell, cell, cell, int, int) $self, slice $msgSlc, slice $sender, int $value) impure inline_ref {
    var (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)) = $self;
    var ($msg'hashlock, $msg'timelock, $msg'srcReceiver, $msg'srcAsset, $msg'dstChain, $msg'dstAddress, $msg'dstAsset, $msg'commitId, $msg'messenger, $msg'jettonMasterAddress, $msg'htlcJettonWalletAddress) = $LockData$_load_not_mut($msgSlc);
    throw_unless(6007, (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)~$HashedTimeLockTON$_fun_lockExists($msg'hashlock) == false));
    throw_unless(21683, (now() <= $msg'timelock));
    throw_unless(4670, ($value != 0));
    $self'locks~__tact_dict_set_int_cell(257, $msg'hashlock, $HTLC$_store_cell($HTLC$_constructor_dstAddress_dstChain_dstAsset_srcAsset_sender_srcReceiver_hashlock_secret_amount_timelock_redeemed_unlocked_jettonMasterAddress_htlcJettonWalletAddress($msg'dstAddress, $msg'dstChain, $msg'dstAsset, $msg'srcAsset, $sender, $msg'srcReceiver, $msg'hashlock, 0, $value, $msg'timelock, false, false, $msg'jettonMasterAddress, $msg'htlcJettonWalletAddress)));
    if ((~ null?($msg'commitId))) {
        int $id = __tact_not_null($msg'commitId);
        $self'commitIdToLockId~__tact_dict_set_int_int(257, $id, $msg'hashlock, 257);
    }
    if (( ((~ null?($msg'messenger))) ? ((~ null?($msg'commitId))) : (false) )) {
        $global_send($SendParameters$_constructor_to_bounce_value_mode_body(__tact_not_null($msg'messenger), true, 20000000, 0, $Notify$_store_cell($Notify$_constructor_data($Notification$_constructor_commitId_hashlock_dstChain_dstAsset_dstAddress_srcAsset_sender_srcReceiver_amount_timelock(__tact_not_null($msg'commitId), $msg'hashlock, $msg'dstChain, $msg'dstAsset, $msg'dstAddress, $msg'srcAsset, $sender, $msg'srcReceiver, $value, $msg'timelock)))));
    }
    $global_emit($TokenLocked$_store_cell($TokenLocked$_constructor_hashlock_dstChain_dstAddress_dstAsset_sender_srcReceiver_srcAsset_amount_timelock_messenger_commitId_jettonMasterAddress_htlcJettonWalletAddress($msg'hashlock, $msg'dstChain, $msg'dstAddress, $msg'dstAddress, $sender, $msg'srcReceiver, $msg'srcAsset, $value, $msg'timelock, __tact_not_null($msg'messenger), __tact_not_null($msg'commitId), $msg'jettonMasterAddress, $msg'htlcJettonWalletAddress)));
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), ());
}

((cell, cell, cell, int, int), tuple) $HashedTimeLockTON$_fun_getLockCDetails((cell, cell, cell, int, int) $self, int $hashlock) impure inline_ref {
    var (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)) = $self;
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), $HTLC$_load_opt(__tact_dict_get_int_cell($self'locks, 257, $hashlock)));
}

((cell, cell, cell, int, int), tuple) $HashedTimeLockTON$_fun_getCommitDetails((cell, cell, cell, int, int) $self, int $commitId) impure inline_ref {
    var (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)) = $self;
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), $PHTLC$_load_opt(__tact_dict_get_int_cell($self'commits, 257, $commitId)));
}

((cell, cell, cell, int, int), int) $HashedTimeLockTON$_fun_commitsLength((cell, cell, cell, int, int) $self) impure inline_ref {
    var (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)) = $self;
    int $length = 0;
    var ($key, $value, $fresh$flag_0) = __tact_dict_min_int_cell($self'commits, 257);
    while ($fresh$flag_0) {
        var ($value'dstAddress, $value'dstChain, $value'dstAsset, $value'srcAsset, $value'sender, $value'senderPubKey, $value'srcReceiver, $value'timelock, $value'amount, $value'messenger, $value'locked, $value'uncommitted, $value'jettonMasterAddress, $value'htlcJettonWalletAddress) = $PHTLC$_not_null($PHTLC$_load_opt($value));
        $length = $length + 1;
        ($key, $value, $fresh$flag_0) = __tact_dict_next_int_cell($self'commits, 257, $key);
    }
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), $length);
}

((cell, cell, cell, int, int), int) $HashedTimeLockTON$_fun_locksLength((cell, cell, cell, int, int) $self) impure inline_ref {
    var (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)) = $self;
    int $length = 0;
    var ($key, $value, $fresh$flag_1) = __tact_dict_min_int_cell($self'locks, 257);
    while ($fresh$flag_1) {
        var ($value'dstAddress, $value'dstChain, $value'dstAsset, $value'srcAsset, $value'sender, $value'srcReceiver, $value'hashlock, $value'secret, $value'amount, $value'timelock, $value'redeemed, $value'unlocked, $value'jettonMasterAddress, $value'htlcJettonWalletAddress) = $HTLC$_not_null($HTLC$_load_opt($value));
        $length = $length + 1;
        ($key, $value, $fresh$flag_1) = __tact_dict_next_int_cell($self'locks, 257, $key);
    }
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), $length);
}

((cell, cell, cell, int, int), int) $HashedTimeLockTON$_fun_lockIdToCommitIdLength((cell, cell, cell, int, int) $self) impure inline_ref {
    var (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)) = $self;
    int $length = 0;
    var ($key, $value, $fresh$flag_2) = __tact_dict_min_int_int($self'commitIdToLockId, 257, 257);
    while ($fresh$flag_2) {
        $length = $length + 1;
        ($key, $value, $fresh$flag_2) = __tact_dict_next_int_int($self'commitIdToLockId, 257, $key, 257);
    }
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), $length);
}

((cell, cell, cell, int, int), cell) $HashedTimeLockTON$_fun_getCommits((cell, cell, cell, int, int) $self, slice $senderAddr) impure inline_ref {
    var (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)) = $self;
    cell $result = null();
    int $i = 0;
    var ($key, $value, $fresh$flag_3) = __tact_dict_min_int_cell($self'commits, 257);
    while ($fresh$flag_3) {
        var ($value'dstAddress, $value'dstChain, $value'dstAsset, $value'srcAsset, $value'sender, $value'senderPubKey, $value'srcReceiver, $value'timelock, $value'amount, $value'messenger, $value'locked, $value'uncommitted, $value'jettonMasterAddress, $value'htlcJettonWalletAddress) = $PHTLC$_not_null($PHTLC$_load_opt($value));
        if (( __tact_slice_eq_bits($senderAddr, $value'sender) )) {
            $result~__tact_dict_set_int_int(257, $i, $key, 257);
            $i = $i + 1;
        }
        ($key, $value, $fresh$flag_3) = __tact_dict_next_int_cell($self'commits, 257, $key);
    }
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), $result);
}

((cell, cell, cell, int, int), cell) $HashedTimeLockTON$_fun_getLocks((cell, cell, cell, int, int) $self, slice $senderAddr) impure inline_ref {
    var (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)) = $self;
    cell $result = null();
    int $i = 0;
    var ($key, $value, $fresh$flag_4) = __tact_dict_min_int_cell($self'locks, 257);
    while ($fresh$flag_4) {
        var ($value'dstAddress, $value'dstChain, $value'dstAsset, $value'srcAsset, $value'sender, $value'srcReceiver, $value'hashlock, $value'secret, $value'amount, $value'timelock, $value'redeemed, $value'unlocked, $value'jettonMasterAddress, $value'htlcJettonWalletAddress) = $HTLC$_not_null($HTLC$_load_opt($value));
        if (( __tact_slice_eq_bits($senderAddr, $value'sender) )) {
            $result~__tact_dict_set_int_int(257, $i, $key, 257);
            $i = $i + 1;
        }
        ($key, $value, $fresh$flag_4) = __tact_dict_next_int_cell($self'locks, 257, $key);
    }
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), $result);
}

((cell, cell, cell, int, int), int) $HashedTimeLockTON$_fun_getLockIdByCommitId((cell, cell, cell, int, int) $self, int $commitId) impure inline_ref {
    var (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)) = $self;
    var ($key, $value, $fresh$flag_5) = __tact_dict_min_int_int($self'commitIdToLockId, 257, 257);
    while ($fresh$flag_5) {
        if (($key == $commitId)) {
            return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), $value);
        }
        ($key, $value, $fresh$flag_5) = __tact_dict_next_int_int($self'commitIdToLockId, 257, $key, 257);
    }
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), null());
}

((cell, cell, cell, int, int), ()) $HashedTimeLockTON$_fun_lockCommitment((cell, cell, cell, int, int) $self, ((int, int, int)) $msg, (int, slice, int, slice) $ctx) impure inline_ref {
    var (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)) = $self;
    var ((($msg'data'commitId, $msg'data'hashlock, $msg'data'timelock))) = $msg;
    var (($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)) = $ctx;
    int $lockId = $msg'data'hashlock;
    throw_unless(30789, (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)~$HashedTimeLockTON$_fun_commitExists($msg'data'commitId) == true));
    var ($commitObj'dstAddress, $commitObj'dstChain, $commitObj'dstAsset, $commitObj'srcAsset, $commitObj'sender, $commitObj'senderPubKey, $commitObj'srcReceiver, $commitObj'timelock, $commitObj'amount, $commitObj'messenger, $commitObj'locked, $commitObj'uncommitted, $commitObj'jettonMasterAddress, $commitObj'htlcJettonWalletAddress) = $PHTLC$_not_null($PHTLC$_load_opt(__tact_dict_get_int_cell($self'commits, 257, $msg'data'commitId)));
    if (( (( __tact_slice_eq_bits($commitObj'sender, $ctx'sender) )) ? (true) : (( __tact_slice_eq_bits($commitObj'messenger, $ctx'sender) )) )) {
        throw_unless(6007, (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)~$HashedTimeLockTON$_fun_lockExists($lockId) == false));
        throw_unless(46722, ($commitObj'locked == false));
        throw_unless(42324, ($commitObj'uncommitted == false));
        $self'locks~__tact_dict_set_int_cell(257, $lockId, $HTLC$_store_cell($HTLC$_constructor_dstAddress_dstChain_dstAsset_srcAsset_sender_srcReceiver_hashlock_secret_amount_timelock_redeemed_unlocked_jettonMasterAddress_htlcJettonWalletAddress($commitObj'dstAddress, $commitObj'dstChain, $commitObj'dstAsset, $commitObj'srcAsset, $commitObj'sender, $commitObj'srcReceiver, $msg'data'hashlock, 0, $commitObj'amount, $msg'data'timelock, false, false, $commitObj'jettonMasterAddress, $commitObj'htlcJettonWalletAddress)));
        $self'commits~__tact_dict_delete_int(257, $msg'data'commitId);
    } else {
        throw_unless(31687, false);
    }
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), ());
}

;;
;; Receivers of a Contract HashedTimeLockTON
;;

(((cell, cell, cell, int, int)), ()) $HashedTimeLockTON$_internal_binary_TokenNotification((cell, cell, cell, int, int) $self, (int, int, slice, slice) $msg) impure inline {
    var ($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed) = $self;
    var ($msg'queryId, $msg'amount, $msg'from, $msg'forward_payload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    slice $slice = begin_parse($Slice$_fun_asCell($msg'forward_payload));
    int $flag = $slice~load_uint(1);
    cell $refCell = $slice~load_ref();
    slice $refSlice = begin_parse($refCell);
    int $op_code = $refSlice~load_uint(32);
    if (($op_code == 1734998782)) {
        ($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)~$HashedTimeLockTON$_fun__commit($refSlice, $msg'from, $msg'amount);
    }
    if (($op_code == 317164721)) {
        ($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)~$HashedTimeLockTON$_fun__lock($refSlice, $msg'from, $msg'amount);
    }
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), ());
}

(((cell, cell, cell, int, int)), ()) $HashedTimeLockTON$_internal_binary_Uncommit((cell, cell, cell, int, int) $self, ((int)) $msg) impure inline {
    var ($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed) = $self;
    var (($msg'data'commitId)) = $msg;
    throw_unless(30789, (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)~$HashedTimeLockTON$_fun_commitExists($msg'data'commitId) == true));
    var ($commitObj'dstAddress, $commitObj'dstChain, $commitObj'dstAsset, $commitObj'srcAsset, $commitObj'sender, $commitObj'senderPubKey, $commitObj'srcReceiver, $commitObj'timelock, $commitObj'amount, $commitObj'messenger, $commitObj'locked, $commitObj'uncommitted, $commitObj'jettonMasterAddress, $commitObj'htlcJettonWalletAddress) = $PHTLC$_not_null($PHTLC$_load_opt(__tact_dict_get_int_cell($self'commits, 257, $msg'data'commitId)));
    throw_unless(38239, ($commitObj'timelock <= now()));
    throw_unless(42324, ($commitObj'uncommitted == false));
    throw_unless(46722, ($commitObj'locked == false));
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    int $queryHash = cell_hash(end_cell(store_int(__tact_store_address(begin_cell(), $ctx'sender), now(), 48)));
    int $queryIndex = (0 & $queryHash);
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($commitObj'htlcJettonWalletAddress, $ctx'value, true, 0, $TokenTransfer$_store_cell($TokenTransfer$_constructor_queryId_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload($queryIndex, $commitObj'amount, $commitObj'sender, my_address(), null(), 1, __tact_str_to_slice(__gen_slice_string_745fd96be4cd665d7df3e2789d5bcd205d53436c91efe2eae1b705281840e313())))));
    $self'commits~__tact_dict_delete_int(257, $msg'data'commitId);
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), ());
}

(((cell, cell, cell, int, int)), ()) $HashedTimeLockTON$_internal_binary_LockCommitment((cell, cell, cell, int, int) $self, ((int, int, int)) $msg) impure inline {
    var ($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed) = $self;
    var (($msg'data'commitId, $msg'data'hashlock, $msg'data'timelock)) = $msg;
    ($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)~$HashedTimeLockTON$_fun_lockCommitment((($msg'data'commitId, $msg'data'hashlock, $msg'data'timelock)), __tact_context_get());
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), ());
}

(((cell, cell, cell, int, int)), ()) $HashedTimeLockTON$_internal_binary_LockCommitmentSig((cell, cell, cell, int, int) $self, ((int, slice, slice)) $msg) impure inline {
    var ($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed) = $self;
    var (($msg'data'commitId, $msg'data'data, $msg'data'signature)) = $msg;
    throw_unless(20173, ($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)~$HashedTimeLockTON$_fun_commitExists($msg'data'commitId));
    var ($commitObj'dstAddress, $commitObj'dstChain, $commitObj'dstAsset, $commitObj'srcAsset, $commitObj'sender, $commitObj'senderPubKey, $commitObj'srcReceiver, $commitObj'timelock, $commitObj'amount, $commitObj'messenger, $commitObj'locked, $commitObj'uncommitted, $commitObj'jettonMasterAddress, $commitObj'htlcJettonWalletAddress) = $PHTLC$_not_null($PHTLC$_load_opt(__tact_dict_get_int_cell($self'commits, 257, $msg'data'commitId)));
    throw_unless(48401, check_signature(slice_hash($msg'data'data), $msg'data'signature, $commitObj'senderPubKey));
    int $hashlock = $msg'data'data~load_int(257);
    int $timelock = $msg'data'data~load_int(257);
    var (($lockCommitmentMessage'data'commitId, $lockCommitmentMessage'data'hashlock, $lockCommitmentMessage'data'timelock)) = $LockCommitment$_constructor_data($LockCommitmentData$_constructor_commitId_hashlock_timelock($msg'data'commitId, $hashlock, $timelock));
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    ($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)~$HashedTimeLockTON$_fun_lockCommitment((($lockCommitmentMessage'data'commitId, $lockCommitmentMessage'data'hashlock, $lockCommitmentMessage'data'timelock)), ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw));
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), ());
}

(((cell, cell, cell, int, int)), ()) $HashedTimeLockTON$_internal_binary_Redeem((cell, cell, cell, int, int) $self, ((int, int)) $msg) impure inline {
    var ($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed) = $self;
    var (($msg'data'lockId, $msg'data'secret)) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(6272, (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)~$HashedTimeLockTON$_fun_lockExists($msg'data'lockId) == true));
    var ($lockObj'dstAddress, $lockObj'dstChain, $lockObj'dstAsset, $lockObj'srcAsset, $lockObj'sender, $lockObj'srcReceiver, $lockObj'hashlock, $lockObj'secret, $lockObj'amount, $lockObj'timelock, $lockObj'redeemed, $lockObj'unlocked, $lockObj'jettonMasterAddress, $lockObj'htlcJettonWalletAddress) = $HTLC$_not_null($HTLC$_load_opt(__tact_dict_get_int_cell($self'locks, 257, $msg'data'lockId)));
    slice $hashlockFromSecretSlice = $Builder$_fun_asSlice(store_uint(begin_cell(), $msg'data'secret, 256));
    int $hashlockFromSecret = string_hash($hashlockFromSecretSlice);
    throw_unless(50918, ($lockObj'hashlock == $hashlockFromSecret));
    throw_unless(1503, ($lockObj'unlocked == false));
    throw_unless(46887, ($lockObj'redeemed == false));
    int $queryHash = cell_hash(end_cell(store_int(__tact_store_address(begin_cell(), $ctx'sender), now(), 48)));
    int $queryIndex = (0 & $queryHash);
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($lockObj'htlcJettonWalletAddress, $ctx'value, true, 0, $TokenTransfer$_store_cell($TokenTransfer$_constructor_queryId_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload($queryIndex, $lockObj'amount, $lockObj'srcReceiver, __tact_context_get_sender(), null(), 1, __tact_str_to_slice(__gen_slice_string_2f7fe9b07f89441d6ea969c50c7445098198d0e0031cf5c4f19adb721422d770())))));
    $self'locks~__tact_dict_delete_int(257, $msg'data'lockId);
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), ());
}

(((cell, cell, cell, int, int)), ()) $HashedTimeLockTON$_internal_binary_Unlock((cell, cell, cell, int, int) $self, ((int)) $msg) impure inline {
    var ($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed) = $self;
    var (($msg'data'hashlock)) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(6272, (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)~$HashedTimeLockTON$_fun_lockExists($msg'data'hashlock) == true));
    var ($lockObj'dstAddress, $lockObj'dstChain, $lockObj'dstAsset, $lockObj'srcAsset, $lockObj'sender, $lockObj'srcReceiver, $lockObj'hashlock, $lockObj'secret, $lockObj'amount, $lockObj'timelock, $lockObj'redeemed, $lockObj'unlocked, $lockObj'jettonMasterAddress, $lockObj'htlcJettonWalletAddress) = $HTLC$_not_null($HTLC$_load_opt(__tact_dict_get_int_cell($self'locks, 257, $msg'data'hashlock)));
    throw_unless(38239, ($lockObj'timelock < now()));
    throw_unless(1503, ($lockObj'unlocked == false));
    throw_unless(46887, ($lockObj'redeemed == false));
    int $queryHash = cell_hash(end_cell(store_int(__tact_store_address(begin_cell(), $ctx'sender), now(), 48)));
    int $queryIndex = (0 & $queryHash);
    $global_send($SendParameters$_constructor_to_value_bounce_mode_body($lockObj'htlcJettonWalletAddress, $ctx'value, true, 0, $TokenTransfer$_store_cell($TokenTransfer$_constructor_queryId_amount_destination_response_destination_custom_payload_forward_ton_amount_forward_payload($queryIndex, $lockObj'amount, $lockObj'sender, __tact_context_get_sender(), null(), 1, __tact_str_to_slice(__gen_slice_string_d3c5974226249205b098bfc49055635817871f13c2281fb641070b6fd4cbe0d6())))));
    $self'locks~__tact_dict_delete_int(257, $msg'data'hashlock);
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), ());
}

(((cell, cell, cell, int, int)), ()) $HashedTimeLockTON$_internal_binary_TokenExcesses((cell, cell, cell, int, int) $self, (int) $msg) impure inline {
    var ($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed) = $self;
    var ($msg'queryId) = $msg;
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), ());
}

(((cell, cell, cell, int, int)), ()) $HashedTimeLockTON$_internal_binary_Deploy((cell, cell, cell, int, int) $self, (int) $deploy) impure inline {
    var ($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed)~$HashedTimeLockTON$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'locks, $self'commits, $self'commitIdToLockId, $self'contractNonce, $self'seed), ());
}

;;
;; Get methods of a Contract HashedTimeLockTON
;;

_ %getLockCDetails(int $hashlock) method_id(111424) {
    int $hashlock = $hashlock;
    var self = $HashedTimeLockTON$_contract_load();
    var res = self~$HashedTimeLockTON$_fun_getLockCDetails($hashlock);
    return $HTLC$_to_opt_external(res);
}

_ %getCommitDetails(int $commitId) method_id(107939) {
    int $commitId = $commitId;
    var self = $HashedTimeLockTON$_contract_load();
    var res = self~$HashedTimeLockTON$_fun_getCommitDetails($commitId);
    return $PHTLC$_to_opt_external(res);
}

_ %commitsLength() method_id(86110) {
    var self = $HashedTimeLockTON$_contract_load();
    var res = self~$HashedTimeLockTON$_fun_commitsLength();
    return res;
}

_ %locksLength() method_id(83309) {
    var self = $HashedTimeLockTON$_contract_load();
    var res = self~$HashedTimeLockTON$_fun_locksLength();
    return res;
}

_ %lockIdToCommitIdLength() method_id(113296) {
    var self = $HashedTimeLockTON$_contract_load();
    var res = self~$HashedTimeLockTON$_fun_lockIdToCommitIdLength();
    return res;
}

_ %getCommits(slice $senderAddr) method_id(77681) {
    slice $senderAddr = __tact_verify_address($senderAddr);
    var self = $HashedTimeLockTON$_contract_load();
    var res = self~$HashedTimeLockTON$_fun_getCommits($senderAddr);
    return res;
}

_ %getLocks(slice $senderAddr) method_id(102208) {
    slice $senderAddr = __tact_verify_address($senderAddr);
    var self = $HashedTimeLockTON$_contract_load();
    var res = self~$HashedTimeLockTON$_fun_getLocks($senderAddr);
    return res;
}

_ %getLockIdByCommitId(int $commitId) method_id(87550) {
    int $commitId = $commitId;
    var self = $HashedTimeLockTON$_contract_load();
    var res = self~$HashedTimeLockTON$_fun_getLockIdByCommitId($commitId);
    return res;
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract HashedTimeLockTON
;;

((cell, cell, cell, int, int), int) $HashedTimeLockTON$_contract_router_internal((cell, cell, cell, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive TokenNotification message
    if (op == 1935855772) {
        var msg = in_msg~$TokenNotification$_load();
        self~$HashedTimeLockTON$_internal_binary_TokenNotification(msg);
        return (self, true);
    }
    
    ;; Receive Uncommit message
    if (op == 2841160739) {
        var msg = in_msg~$Uncommit$_load();
        self~$HashedTimeLockTON$_internal_binary_Uncommit(msg);
        return (self, true);
    }
    
    ;; Receive LockCommitment message
    if (op == 1558004185) {
        var msg = in_msg~$LockCommitment$_load();
        self~$HashedTimeLockTON$_internal_binary_LockCommitment(msg);
        return (self, true);
    }
    
    ;; Receive LockCommitmentSig message
    if (op == 3252164863) {
        var msg = in_msg~$LockCommitmentSig$_load();
        self~$HashedTimeLockTON$_internal_binary_LockCommitmentSig(msg);
        return (self, true);
    }
    
    ;; Receive Redeem message
    if (op == 1972220037) {
        var msg = in_msg~$Redeem$_load();
        self~$HashedTimeLockTON$_internal_binary_Redeem(msg);
        return (self, true);
    }
    
    ;; Receive Unlock message
    if (op == 2910985977) {
        var msg = in_msg~$Unlock$_load();
        self~$HashedTimeLockTON$_internal_binary_Unlock(msg);
        return (self, true);
    }
    
    ;; Receive TokenExcesses message
    if (op == 3576854235) {
        var msg = in_msg~$TokenExcesses$_load();
        self~$HashedTimeLockTON$_internal_binary_TokenExcesses(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$HashedTimeLockTON$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $HashedTimeLockTON$_contract_load();
    
    ;; Handle operation
    int handled = self~$HashedTimeLockTON$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $HashedTimeLockTON$_contract_store(self);
}
